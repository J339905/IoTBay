
Invoice
-- frilab.Invoice definition
 
CREATE TABLE `Invoice` (
  `InvoiceID` int NOT NULL AUTO_INCREMENT,
  `OrderID` int NOT NULL,
  `amount` int NOT NULL,
  `PaymentDate` datetime NOT NULL,
  PRIMARY KEY (`InvoiceID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
 
INSERT INTO frilab.Invoice (OrderID,amount,PaymentDate) VALUES
	 (1,1,'2024-04-19 00:00:00');


     -- IOTData.OrderLine definition
CREATE TABLE `OrderLine` (
  `lineItemid` int NOT NULL AUTO_INCREMENT,
  `OrderID` int NOT NULL,
  `ProductID` int NOT NULL,
  `quantity` int NOT NULL,
  PRIMARY KEY (`lineItemid`),
  KEY `OrderLine_Order_FK` (`OrderID`),
  CONSTRAINT `OrderLine_Order_FK` FOREIGN KEY (`OrderID`) REFERENCES `Order` (`OrderID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
INSERT INTO IOTData.OrderLine (OrderID,ProductID,quantity) VALUES
	 (1,1,1);

-- IOTData.`Order` definition
CREATE TABLE `Order` (
  `OrderID` int NOT NULL AUTO_INCREMENT,
  `UserID` int NOT NULL,
  `Order_Date` datetime NOT NULL,
  `Order_Status` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`OrderID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
INSERT INTO IOTData.`Order` (UserID,Order_Date,Order_Status) VALUES
	 (1,'2024-04-19 00:00:00','Pending');

-- IOTDATA.payment definition
 
CREATE TABLE `payment` (
  `paymentID` int NOT NULL AUTO_INCREMENT,
  `orderID` int NOT NULL,
  `amount` int NOT NULL,
  `paymentDate` timestamp NULL DEFAULT NULL,
  `PaymentMethod` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`paymentID`)
) ENGINE=InnoDB AUTO_INCREMENT=32238724 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
 
INSERT INTO IOTDATA.payment (orderID,amount,paymentDate,PaymentMethod) VALUES
	 (32321,2648,'2024-04-19 00:00:00','Card');


-- IOTDATA.shipment definition
 
CREATE TABLE `shipment` (
  `shipmentID` int NOT NULL AUTO_INCREMENT,
  `orderID` int NOT NULL,
  `shipmentDate` timestamp NOT NULL,
  `shipmentStatus` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`shipmentID`)
) ENGINE=InnoDB AUTO_INCREMENT=45453436 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
 
INSERT INTO IOTDATA.shipment (orderID,shipmentDate,shipmentStatus) VALUES
	 (67676767,'2024-04-19 00:00:00','Shipped');

CREATE TABLE frilab.Product (

	ProductID INT auto_increment NOT NULL,

	Product_Category varchar(100) NOT NULL,

	Product_Name varchar(100) NOT NULL,

	Product_Stock varchar(100) NOT NULL,

	Product_Price varchar(100) NULL,

	CONSTRAINT Product_pk PRIMARY KEY (ProductID)

)

ENGINE=InnoDB

DEFAULT CHARSET=utf8mb4

COLLATE=utf8mb4_0900_ai_ci;
 
 
CREATE TABLE `user` (

  `UserID` int NOT NULL AUTO_INCREMENT,

  `Email` varchar(100) NOT NULL,

  `Password` varchar(100) NOT NULL,

  `Phone_Number` int DEFAULT NULL,

  `Gender` varchar(100) NOT NULL,

  `Favourite_Colour` varchar(100) NOT NULL,

  PRIMARY KEY (`UserID`)

) ENGINE=InnoDB AUTO_INCREMENT=1235 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
 
CREATE TABLE frilab.Staff (

	UserID INT auto_increment NOT NULL,

	`role` varchar(100) NOT NULL,

	CONSTRAINT Staff_unique UNIQUE KEY (UserID),

	CONSTRAINT UserID FOREIGN KEY (UserID) REFERENCES frilab.`user`(UserID)

)

ENGINE=InnoDB

DEFAULT CHARSET=utf8mb4

COLLATE=utf8mb4_0900_ai_ci;

package uts.isd.Controller;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import uts.isd.model.dao.DBConnector;
import uts.isd.model.dao.UserDAO;

public class ConnServlet extends HttpServlet {

	private DBConnector db;
	private UserDAO userDAO;
	private Connection conn;

	@Override
	public void init() {
		try {
			db = new DBConnector();
		} catch (ClassNotFoundException | SQLException ex) {
			System.out.println(ex);
		}
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
		response.setContentType("text/html;charset=UTF-8");
		HttpSession session = request.getSession();
		conn = db.openConnection();

		try {
			userDAO = new UserDAO(conn);
		} catch (SQLException e) {
			System.out.print(e);
		}

		session.setAttribute("userDAO", userDAO);
		request.getRequestDispatcher("index.jsp").include(request, response);
	}

	@Override
	public void destroy() {
		try {
			db.closeConnection();
		} catch (SQLException e) {
			System.out.println(e);
		}
	}
	
}// // package uts.isd.Controller;

// // import java.io.IOException;
// // import java.sql.Connection;
// // import java.sql.SQLException;

// // import javax.servlet.ServletException;
// // import javax.servlet.http.HttpServlet;
// // import javax.servlet.http.HttpServletRequest;
// // import javax.servlet.http.HttpServletResponse;
// // import javax.servlet.http.HttpSession;

// // import uts.isd.model.User;
// // import uts.isd.model.dao.DBConnector;
// // import uts.isd.model.dao.UserDAO;
// // import uts.isd.model.dao.logDAO;

// // public class LoginServlet extends HttpServlet {

// //     private DBConnector db;
// //     private UserDAO userDAO;
// //     private logDAO logDAO;


// //     @Override
// //     public void init() throws ServletException {
// //         super.init();
// //         try {
// //             db = new DBConnector();  // Initialize the DBConnector.
// //             Connection conn = db.openConnection();
// //             userDAO = new UserDAO(conn);
// //             logDAO = new logDAO(conn);
// //         } catch (ClassNotFoundException | SQLException e) {
// //             throw new ServletException("DBConnector initialization failed.", e);
// //         }
// //     }    
// //     @Override
// //     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
// //         HttpSession session = request.getSession();
// //         String email = request.getParameter("email");
// //         String password = request.getParameter("password");

// //         try (Connection conn = db.openConnection()) {  // Ensures the connection is closed after the try block
// //             UserDAO userDAO = new UserDAO(conn);  // This should correctly instantiate UserDAO
// //             User user = userDAO.findUser(email, password);
// //             if (user != null) {
// //                 session.setAttribute("user", user);

// //                 // Log the login activity
// //                 String currentTime = java.time.LocalDateTime.now().toString();  // Get current time
// //                 // logDAO.createLog(user.getUserID(), currentTime, "Login");
// //                 try {
// //                     logDAO.createLog(user.getUserID(), currentTime, "Login");
// //                 } catch (SQLException e) {
// //                     System.err.println("Error when attempting to log activity for UserID: " + user.getUserID());
// //                     e.printStackTrace();
// //                     // Log detailed connection and transaction state here if possible
// //                 }

// //                 response.sendRedirect("welcome.jsp");  // Navigate to welcome page
// //             } else {
// //                 session.setAttribute("loginErr", "Invalid email/password");
// //                 response.sendRedirect("login.jsp");  // Stay on login page with error
// //             }
            
// //         } catch (SQLException e) {
// //             e.printStackTrace();
// //             session.setAttribute("loginErr", "Database connection problem.");
// //             response.sendRedirect("login.jsp");  // Database connection issue
// //         }
// //     }

// //     @Override
// //     public void destroy() {
// //         try {
// //             if (db != null) {
// //                 db.closeConnection();  // Ensure to close the connection when destroying the servlet.
// //             }
// //         } catch (SQLException e) {
// //             e.printStackTrace();
// //         }
// //     }
// // }


// package uts.isd.Controller;

// import java.io.IOException;
// import java.sql.Connection;
// import java.sql.SQLException;

// import javax.servlet.ServletException;
// import javax.servlet.http.HttpServlet;
// import javax.servlet.http.HttpServletRequest;
// import javax.servlet.http.HttpServletResponse;
// import javax.servlet.http.HttpSession;

// import uts.isd.model.User;
// import uts.isd.model.dao.DBConnector;
// import uts.isd.model.dao.UserDAO;
// import uts.isd.model.dao.logDAO;

// public class LoginServlet extends HttpServlet {

//     private DBConnector db;
//     private logDAO logDao;

//     @Override
//     public void init() throws ServletException {
//         super.init();
//         try {
//             db = new DBConnector();  // Initialize the DBConnector.
//             Connection conn = db.openConnection();  // Open a connection
//             logDao = new logDAO(conn);  // Initialize logDAO
//         } catch (ClassNotFoundException | SQLException e) {
//             throw new ServletException("DBConnector initialization failed.", e);
//         }
//     }

//     @Override
//     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
//         HttpSession session = request.getSession();
//         String email = request.getParameter("email");
//         String password = request.getParameter("password");

//         try (Connection conn = db.openConnection()) {
//             UserDAO userDAO = new UserDAO(conn);
//             User user = userDAO.findUser(email, password);
//             if (user != null) {
//                 session.setAttribute("user", user);

//                 // Debug statement to trace the UserID
//                 System.out.println("Logging activity for UserID: " + user.getUserID());
                
//                 // Log the login activity
//                 String currentTime = java.time.LocalDateTime.now().toString();
//                 logDao.createLog(user.getUserID(), currentTime, "Login");

//                 response.sendRedirect("welcome.jsp");  // Navigate to welcome page
//             } else {
//                 session.setAttribute("loginErr", "Invalid email/password");
//                 response.sendRedirect("login.jsp");  // Stay on login page with error
//             }
//         } catch (SQLException e) {
//             e.printStackTrace();
//             session.setAttribute("loginErr", "Database connection problem.");
//             response.sendRedirect("login.jsp");
//         }
//     }

//     @Override
//     public void destroy() {
//         try {
//             if (db != null) {
//                 db.closeConnection();
//             }
//         } catch (SQLException e) {
//             e.printStackTrace();
//         }
//     }
// }


package uts.isd.Controller;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import uts.isd.model.User;
import uts.isd.model.dao.DBConnector;
import uts.isd.model.dao.UserDAO;
import uts.isd.model.dao.logDAO;

public class LoginServlet extends HttpServlet {

    private DBConnector db;
    private UserDAO userDAO;
    private logDAO logDAO;

    @Override
    public void init() throws ServletException {
        super.init();
        try {
            db = new DBConnector();  // Initialize the DBConnector.
            Connection conn = db.openConnection();  // Open a connection
            userDAO = new UserDAO(conn);  // Initialize UserDAO
            logDAO = new logDAO(conn);  // Initialize logDAO
        } catch (ClassNotFoundException | SQLException e) {
            throw new ServletException("DBConnector initialization failed.", e);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        String email = request.getParameter("email");
        String password = request.getParameter("password");

        try {
            int userId = userDAO.retrievetUserId(email, password); // Get UserID from UserDAO
            if (userId != -1) { // Check if UserID is valid
                User user = userDAO.findUser(email, password); // Get User details using UserID
                session.setAttribute("user", user); // Set user attribute in session

                // Debug statement to trace the UserID
                System.out.println("Logging activity for UserID: " + user.getUserID());

                // Log the login activity
                String currentTime = java.time.LocalDateTime.now().toString();
                logDAO.createLog(userId, currentTime, "Login"); // Use UserID for logging

                // response.sendRedirect("welcome.jsp");  // Navigate to welcome page
                response.sendRedirect("WelcomeServlet");
            } else {
                session.setAttribute("loginErr", "Invalid email/password");
                response.sendRedirect("login.jsp");  // Stay on login page with error
            }
        } catch (SQLException e) {
            e.printStackTrace();
            session.setAttribute("loginErr", "Database connection problem.");
            response.sendRedirect("login.jsp");
        }
    }

    @Override
    public void destroy() {
        try {
            if (db != null) {
                db.closeConnection();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}


package uts.isd.Controller;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import uts.isd.model.User;
import uts.isd.model.dao.DBConnector;
import uts.isd.model.dao.UserDAO;
import uts.isd.model.dao.logDAO;

public class RegisterServlet extends HttpServlet {

    private DBConnector db;
    private UserDAO userDAO;
    private logDAO logDao;

    @Override
    public void init() throws ServletException {
        super.init();
        try {
            db = new DBConnector();
            Connection conn = db.openConnection();
            userDAO = new UserDAO(conn);
            logDao = new logDAO(conn);
        } catch (ClassNotFoundException | SQLException e) {
            throw new ServletException("DBConnector initialization failed.", e);
        }
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();

        String firstname = request.getParameter("firstname");
        String lastname = request.getParameter("lastname");
        String email = request.getParameter("email");
        int phone = Integer.parseInt(request.getParameter("phone"));
        String password = request.getParameter("password");
        String gender = request.getParameter("gender");
        String role = "Customer";  // Default role for new registrations

        try {
            int userId = userDAO.createUser(firstname, lastname, email, phone, password, gender, role);
            User user = new User(firstname, lastname, email, phone, password, gender, role);
            user.setUserID(userId);
            session.setAttribute("user", user);

            // Log the activity
            logDao.createLog(userId, java.time.LocalDateTime.now().toString(), "Registered");

            // Redirect to welcome page after registration
            response.sendRedirect("welcome.jsp");
        } catch (SQLException e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Database error during registration.");
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Internal server error.");
        }
    }

    @Override
    public void destroy() {
        super.destroy();
        try {
            if (db != null) {
                db.closeConnection();
            }
        } catch (SQLException e) {
            System.err.println("Failed to close database connection.");
        }
    }
}

package uts.isd.model.dao;

import java.sql.Connection;

public abstract class DB {
	protected String URL = "jdbc:mysql://localhost:3306/";
	protected String db = "frilab";
	protected String dbuser = "root";
	protected String dbpass = "12345";
	protected String driver = "com.mysql.cj.jdbc.Driver";
	protected Connection conn;
}package uts.isd.model.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

public class DBConnector extends DB {

	public DBConnector() throws ClassNotFoundException, SQLException {
		Class.forName(driver);

		Properties dbProperties = new Properties();
		dbProperties.put("user", dbuser);
		dbProperties.put("password", dbpass);
		dbProperties.put("allowPublicKeyRetrieval", "true");
		dbProperties.put("useSSL", "false");

		try {
			conn = DriverManager.getConnection(URL + db, dbProperties);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection openConnection() {
		return this.conn;
	}

	public void closeConnection() throws SQLException {
		this.conn.close();
	}
}


package uts.isd.model.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import uts.isd.model.Logs;
import uts.isd.model.User;

public class logDAO {
 private PreparedStatement readst;
    private String readQuery = "SELECT UserID, FirstName, LastName from User";
    private Connection conn;
    // private String insertQuery = "SELECT AccountID, FirstName, LastName from
    // Account";

    public logDAO(Connection connection) throws SQLException {
        this.conn = connection;
        connection.setAutoCommit(true);
        readst = connection.prepareStatement(readQuery);
    }
    

    

    // public void createLog(String ActivityTime, String ActivityType) throws SQLException {

	// 	PreparedStatement st = conn.prepareStatement("Insert into actvitylogs(ActivityTime, ActivityType) Values(?,?)");
	// 	st.setString(1, ActivityTime);
    //     st.setString(2, ActivityType);

	// }
    public void createLog(int UserID,String ActivityTime, String ActivityType) throws SQLException {

		try(PreparedStatement st = conn.prepareStatement("Insert into logs(UserID, ActivityTime, ActivityType) Values(?,?,?)")){
		st.setInt(1, UserID);
        st.setString(2, ActivityTime);
        st.setString(3, ActivityType);
        st.executeUpdate();

	}
}
    // public void createLog(int UserID, String activityTime, String activityType) throws SQLException {
    //     String sql = "INSERT INTO activitylogs (UserID, ActivityTime, ActivityType) VALUES (?, ?, ?)";
    //     try (PreparedStatement ps = conn.prepareStatement(sql)) {
    //         ps.setInt(1, UserID);
    //         ps.setString(2, activityTime);
    //         ps.setString(3, activityType);
    //         ps.executeUpdate();
    //     }
    // }
    public ArrayList<Logs> fetchLogs() throws SQLException {
        ResultSet rs = readst.executeQuery();
        ArrayList<Logs> logs = new ArrayList<Logs>();

        while (rs.next()) {
            String ActivityTime = rs.getString(2);
            String ActivityType = rs.getString(3);

            Logs u = new Logs();

            // u.setName(firstName + " " + lastName);

            System.out.println(ActivityTime + " " + ActivityType);

            logs.add(u);
        }
        return logs;
    }
    public boolean doesUserExist(int userID) throws SQLException {
    String sql = "SELECT COUNT(1) FROM user WHERE UserID = ?";
    try (PreparedStatement ps = conn.prepareStatement(sql)) {
        ps.setInt(1, userID);
        try (ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        }
    }
    return false;
}

    // public User findUser(String email, String password) throws SQLException {
    //     String sql = "SELECT * FROM user WHERE email = ? AND password = ?";
    //     try (PreparedStatement st = conn.prepareStatement(sql)) {
    //         st.setString(1, email);
    //         st.setString(2, password);
    //         try (ResultSet rs = st.executeQuery()) {
    //             if (rs.next()) {
    //                 return new User(
    //                     rs.getString("FirstName"),
    //                     rs.getString("LastName"),
    //                     rs.getString("Email"),
    //                     rs.getInt("Phone_Number"),
    //                     rs.getString("Password"),
    //                     rs.getString("Gender"),
    //                     rs.getString("Role")
    //                 );
    //             }
    //         }
    //     }
    //     return null;
    // }
    
}
package uts.isd.model.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import uts.isd.model.User;

public class UserDAO {
    private PreparedStatement readst;
    private String readQuery = "SELECT UserID, FirstName, LastName from User";
    private Connection conn;
    // private String insertQuery = "SELECT AccountID, FirstName, LastName from
    // Account";

    public UserDAO(Connection connection) throws SQLException {
        this.conn = connection;
        connection.setAutoCommit(true);
        readst = connection.prepareStatement(readQuery);
    }

    

    // public void createUser(String firstname, String lastname, String email, int phone, String password, String gender, String role) throws SQLException {
    //     System.out.println("Gender: " + gender);  // This will show what gender value is being received.

	// 	PreparedStatement st = conn.prepareStatement("Insert into user(FirstName, LastName , email, Phone_Number, password ,Role, gender) Values(?,?,?,?,?,?,?)");
	// 	st.setString(1, firstname);
    //     st.setString(2, lastname);
	// 	st.setString(3, email);
	// 	st.setInt(4, phone);
	// 	st.setString(5, password);
    //     st.setString(6, gender);
    //     st.setString(7, role);
	// 	st.executeUpdate();
	// }
    // public ArrayList<User> fetchUsers() throws SQLException {
    //     ResultSet rs = readst.executeQuery();
    //     ArrayList<User> users = new ArrayList<User>();

    //     while (rs.next()) {
    //         String firstName = rs.getString(2);
    //         String lastName = rs.getString(3);

    //         User u = new User();

    //         // u.setName(firstName + " " + lastName);

    //         // System.out.println(firstName + " " + lastName);

    //         users.add(u);
    //     }
    //     return users;
    // }
    public int createUser(String firstname, String lastname, String email, int phone, String password, String gender, String role) throws SQLException {
        String sql = "INSERT INTO user (FirstName, LastName, Email, Phone_Number, Password, Gender, Role) VALUES (?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement st = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
        st.setString(1, firstname);
        st.setString(2, lastname);
        st.setString(3, email);
        st.setInt(4, phone);
        st.setString(5, password);
        st.setString(6, gender);
        st.setString(7, role);
        st.executeUpdate();
        
        ResultSet rs = st.getGeneratedKeys();
        if (rs.next()) {
            return rs.getInt(1); // Return the UserID of the newly inserted user
        } else {
            throw new SQLException("Creating user failed, no ID obtained.");
        }
    }
    

    public User findUser(String email, String password) throws SQLException {
        String sql = "SELECT * FROM user WHERE email = ? AND password = ?";
        try (PreparedStatement st = conn.prepareStatement(sql)) {
            st.setString(1, email);
            st.setString(2, password);
    
            try (ResultSet rs = st.executeQuery()) {
                if (rs.next()) {
                    return new User(
                        rs.getString("FirstName"),
                        rs.getString("LastName"),
                        rs.getString("Email"),
                        rs.getInt("Phone_Number"),
                        rs.getString("Password"),
                        rs.getString("Gender"),
                        rs.getString("Role")
                    );
                }
            }
        }
        return null;
    }
    public int retrievetUserId(String email, String password) throws SQLException {
        String sql = "SELECT UserID FROM user WHERE Email = ? AND Password = ?";
        try (PreparedStatement st = conn.prepareStatement(sql)) {
            st.setString(1, email);
            st.setString(2, password);
    
            try (ResultSet rs = st.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("UserID");
                }
            }
        }
        return -1; // Return -1 if no matching user found
    }
    public boolean doesUserExist(int userID) throws SQLException {
        String sql = "SELECT COUNT(1) FROM user WHERE UserID = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, userID);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        }
        return false;
    }
    

}


<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%@page import="uts.isd.model.*"%>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home Page</title>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="css/index.css">
</head>
<body onload="startTime()" class="mountain-background">


    <div class="container mt-5">
        <h1 id="greeting"></h1>
        <script>
            function startTime() {
                const today = new Date();
                let h = today.getHours();
                let greeting;
                if (h < 12) {
                    greeting = 'Good Morning!';
                } else if (h < 18) {
                    greeting = 'Good Afternoon!';
                } else {
                    greeting = 'Good Evening!';
                }
                document.getElementById('greeting').innerHTML = greeting + ' Welcome to Our Home Page';
            }
        </script>
        <a href="/register.jsp" class="btn btn-primary mt-3">Register an Account</a>
        <a href="/login.jsp" class="btn btn-primary mt-3">Login to your Account</a>
    </div>

    
    <script src="script.js"></script>
</body>
</html><%@page contentType="text/html" pageEncoding="UTF-8"%>
<%@page import="uts.isd.model.User"%>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Login Page</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            padding-top: 40px;
            padding-bottom: 40px;
            background-color: #f5f5f5;
        }
        .form-signin {
            width: 100%;
            max-width: 330px;
            padding: 15px;
            margin: auto;
        }
        .form-signin .checkbox {
            font-weight: 400;
        }
        .form-signin .form-control {
            position: relative;
            box-sizing: border-box;
            height: auto;
            padding: 10px;
            font-size: 16px;
        }
        .form-signin .form-control:focus {
            z-index: 2;
        }
        .form-signin input[type="email"] {
            margin-bottom: -1px;
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 0;
        }
        .form-signin input[type="password"] {
            margin-bottom: 10px;
            border-top-left-radius: 0;
            border-top-right-radius: 0;
        }
        .error {
            color: red;
        }
    </style>
</head>
<body class="text-center">
    <form class="form-login" method="POST" action="/LoginServlet">
        <img class="mb-4" src="https://getbootstrap.com/docs/4.5/assets/brand/bootstrap-solid.svg" alt="" width="72" height="72">
        <h1 class="h3 mb-3 font-weight-normal">Please sign in</h1>
        <%
           
        %>
        <label for="inputEmail" class="sr-only">Email address</label>
        <input type="email" id="inputEmail" class="form-control" placeholder="Email address" required autofocus name="email">
        <label for="inputPassword" class="sr-only">Password</label>
        <input type="password" id="inputPassword" class="form-control" placeholder="Password" required name="password">
        <div class="mt-3">
            Don't have an account? <a href="register.jsp">Press here</a>
        </div>
        <input type="hidden" name="loginAttempt" value="true">
        <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>
        <p class="mt-5 mb-3 text-muted">&copy; 2023</p>
    </form>
    
</body>
</html>
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Register</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body { padding-top: 40px; padding-bottom: 40px; background-color: #f5f5f5; }
        .form-register { max-width: 210px; padding: 15px; margin: auto; }
    </style>
</head>
<body>
 <%
        String emailErr = (String) session.getAttribute("emailErr");
        
    %>
    <form class="form-register" method="POST" action="/RegisterServlet">
        <h1 class="h3 mb-3 font-weight-normal">Please register</h1>
        <input type="email" name="email" class="form-control" placeholder="Email address" required autofocus>
        <%-- <% if(emailErr != null) { %>
                <h1><%=emailErr%></h1>
            <% } %> --%>
        <input type="text" name="firstname" class="form-control" placeholder="First Name" required>
        <input type="text" name="lastname" class="form-control" placeholder="Last Name" required>
        
        <input type="password" name="password" class="form-control" placeholder="Password" required>
        <input type="text" name="phone" class="form-control" placeholder="Phone Number" required>
        <select class="form-control" name="gender" required>
            <option value="">Select Gender</option>
            <option value="male">Male</option>
            <option value="female">Female</option>
            <option value="other">Other</option>
        </select>
        <input type="color" name="favcol" class="form-control" placeholder="Favourite Colour" required>
        <div class="checkbox mb-3">
            <label><input type="checkbox" name="tos" value="agree" required> Agree to Terms of Service</label>
        </div>
        <button class="btn btn-lg btn-primary btn-block" type="submit">Register</button>
        <div class="mt-3">Already have an account? <a href="login.jsp">Click here</a></div>
    </form>
</body>
</html>

<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%@page import="uts.isd.model.User"%>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
      
       
        body {
        padding-top: 40px;
        padding-bottom: 40px;
        background-color: #f5f5f5;
        background-image: url('/css/Mountain-Background.jpeg') center center/cover no-repeat fixed; 
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
    }
    .container {
        max-width: 500px;
        padding: 15px;
        margin: auto;
        background: rgba(255, 255, 255, 0.8);
    }
    .alert {
        margin-top: 20px;
    }
    </style>
</head>
<body>
    <div class="container text-center">
        <% User user = (User) session.getAttribute("user"); %>
        <% String logout = request.getParameter("logout"); %>
        <% if("true".equals(logout)) { %>
            <div class="alert alert-success" role="alert">
                You have been successfully logged out.
            </div>
        <% } %>
        <% if(user != null) { %>
            <h1 class="h3 mb-3 font-weight-normal">Welcome, <%= user.getfirstName() %>!</h1>
            <p>Your email: <%= user.getEmail() %></p>
            <p>Your gender: <%= user.getGender() %></p>
            <%-- <p>Your id: <%= user.getUserID() %></p> --%>
            <p>Your favourite colour: <span style="color:<%= user.getFavCol() %>;">&#9632;</span></p>
            <a href="logout.jsp" class="btn btn-primary btn-lg active" role="button" aria-pressed="true">Logout</a>
        <% } else { %>
            <h1 class="h3 mb-3 font-weight-normal">Please login or register.</h1>
            <a href="login.jsp" class="btn btn-primary btn-lg active" role="button" aria-pressed="true">Login</a>
            <a href="register.jsp" class="btn btn-secondary btn-lg active" role="button" aria-pressed="true">Register</a>
        <% } %>
    </div>
     
</body>
</html>

what i want to do is work a welcome servlet help me